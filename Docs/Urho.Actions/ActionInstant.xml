<Type Name="ActionInstant" FullName="Urho.Actions.ActionInstant">
  <TypeSignature Language="C#" Value="public class ActionInstant : Urho.Actions.FiniteTimeAction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ActionInstant extends Urho.Actions.FiniteTimeAction" />
  <AssemblyInfo>
    <AssemblyName>Urho</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Urho.Actions.FiniteTimeAction</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Base class for actions that have an immediate effect.</summary>
    <remarks>
      <para>This is a base class that will invoke the Update method in the <see cref="T:Urho.Actions.ActionState" /> with the value of one as soon as it is executed.   </para>
      <para>The following example shows how you would implement an instant:</para>
      <code lang="C#"><![CDATA[public class MyInstant : ActionInstant
{
    public MyInstant () {}
    protected internal override ActionState StartAction(Node target)
    {
        return new MyInstantState (this, target);
    }

    public override FiniteTimeAction Reverse ()
    {
        return (new MyInstantReverse ());
    }
}

public class MyInstantState : ActionInstantState
{
    public MyInstantState (MyInstant action, Node target)
        : base (action, target) {}
    public override void Update (float time)]]></code>
      <para>
      </para>
      <para>In this imaginary action, you there would be an inverse operation called “MyInstantReverse”, which is used to implement the Reverse method in this case.</para>
      <para>The “PerformOp” call is the one that does the change, and it will be invoked only once.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ActionInstant ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the instant action</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public override Urho.Actions.FiniteTimeAction Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Urho.Actions.FiniteTimeAction Reverse() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Actions.FiniteTimeAction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method must be overwritten and return the reverse action of your custom action.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAction">
      <MemberSignature Language="C#" Value="protected override Urho.Actions.ActionState StartAction (Urho.Node target);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class Urho.Actions.ActionState StartAction(class Urho.Node target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Actions.ActionState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Urho.Node" />
      </Parameters>
      <Docs>
        <param name="target">
          <para>The new <see cref="T:Urho.Actions.ActionState" /> that encapsulates the state and provides the implementation to perform your action.</para>
        </param>
        <summary>Creates the action state for this action, called on demand from the framework to start executing the recipe.</summary>
        <returns>To be added.</returns>
        <remarks>New action that will perform the inverse of this action</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
