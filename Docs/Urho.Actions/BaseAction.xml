<Type Name="BaseAction" FullName="Urho.Actions.BaseAction">
  <TypeSignature Language="C#" Value="public abstract class BaseAction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BaseAction extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Urho</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Base class for actions in Urho.</summary>
    <remarks>
      <para>In general, you will be using one of the concrete implementations of BaseAction that provide a lot of functionality.</para>
      <para>
      </para>
      <para>Actions are stateless, when you subclass this class, you should never keep any writable state.  Your subclass should merely act as a blueprint for what the action should do.</para>
      <para>
      </para>
      <para>When you create own actions, you need to override the <see cref="M:Urho.Actions.BaseAction.StartAction" /> method to return an <see cref="T:Urho.Actions.ActionState" /> subclass which is in chage of driving the action over time.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BaseAction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Base constructor</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAction">
      <MemberSignature Language="C#" Value="protected virtual Urho.Actions.ActionState StartAction (Urho.Node target);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class Urho.Actions.ActionState StartAction(class Urho.Node target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Actions.ActionState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Urho.Node" />
      </Parameters>
      <Docs>
        <param name="target">
          <para>The new <see cref="T:Urho.Actions.ActionState" /> that encapsulates the state and provides the implementation to perform your action.</para>
        </param>
        <summary>Creates the action state for this action, called on demand from the framework to start executing the recipe.</summary>
        <returns>The new <see cref="T:Urho.Actions.ActionState" /> that encapsulates the state and provides the implementation to perform your action.</returns>
        <remarks>New action that will perform the inverse of this action</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public int Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tag used to easily reference an action from code using a code.</summary>
        <value>
          <para>
          </para>
        </value>
        <remarks>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
