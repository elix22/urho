<Type Name="BoundingBox" FullName="Urho.BoundingBox">
  <TypeSignature Language="C#" Value="public struct BoundingBox" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit BoundingBox extends System.ValueType" />
  <AssemblyInfo>
    <AssemblyName>Urho</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>3D bounding box</summary>
    <remarks>A 3D-space bounding box with two 3D-vector properties, one for the minimal value (<see cref="P:Urho.BoundingBox.Min)" />, and one for the maximum value (<see cref="P:Urho.BoundingBox.Max)" />.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BoundingBox (Urho.Frustum frustum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Urho.Frustum frustum) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="frustum" Type="Urho.Frustum" />
      </Parameters>
      <Docs>
        <param name="frustum">The frustum containing the vertices</param>
        <summary>Constructs a bounding box from the vertices of a frustum</summary>
        <remarks>This creates a bounding box that encompasses the frustum vertices.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BoundingBox (Urho.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Urho.Rect rect) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="Urho.Rect" />
      </Parameters>
      <Docs>
        <param name="rect">Rectangle to use as the reference for the bounding box.</param>
        <summary>Constructs from a rectangle, setting the Z coordinate as zero.</summary>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BoundingBox (Urho.Vector3[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Urho.Vector3[] points) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="points" Type="Urho.Vector3[]" />
      </Parameters>
      <Docs>
        <param name="points">Array of vectors.</param>
        <summary>Constructs from an array of vectors</summary>
        <remarks>This constructs a bounding box that encompasses all the vectors provided.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BoundingBox (float min, float max);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 min, float32 max) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="min" Type="System.Single" />
        <Parameter Name="max" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="min">Minimum value.</param>
        <param name="max">Maximum value.</param>
        <summary>
          <para>Construct from minimum and maximum floats (all dimensions same.)</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BoundingBox (Urho.Vector3 min, Urho.Vector3 max);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Urho.Vector3 min, valuetype Urho.Vector3 max) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="min" Type="Urho.Vector3" />
        <Parameter Name="max" Type="Urho.Vector3" />
      </Parameters>
      <Docs>
        <param name="min">Minimum value.</param>
        <param name="max">Maximum value.</param>
        <summary>Construct from minimum and maximum vectors.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Center">
      <MemberSignature Language="C#" Value="public Urho.Vector3 Center { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Vector3 Center" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Vector3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the center of the bounding box.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public Urho.BoundingBox Clip (Urho.BoundingBox box);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Urho.BoundingBox Clip(valuetype Urho.BoundingBox box) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.BoundingBox</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="box" Type="Urho.BoundingBox" />
      </Parameters>
      <Docs>
        <param name="box">The bounding box to clip this instance of the bounding box with.</param>
        <summary>Clips the bounding box with the provided box and returns the new result</summary>
        <returns>The new clipped value.   The original bounding box remains unmodified.</returns>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Defined">
      <MemberSignature Language="C#" Value="public bool Defined ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Defined() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Return true if this bounding box is defined via a previous call to Define() or Merge().</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DummyMax">
      <MemberSignature Language="C#" Value="public float DummyMax;" />
      <MemberSignature Language="ILAsm" Value=".field public float32 DummyMax" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Unused, used for structure field padding.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DummyMin">
      <MemberSignature Language="C#" Value="public float DummyMin;" />
      <MemberSignature Language="ILAsm" Value=".field public float32 DummyMin" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Unused, used for structure field padding.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HalfSize">
      <MemberSignature Language="C#" Value="public Urho.Vector3 HalfSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Vector3 HalfSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Vector3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the half-size of the bounding box.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInside">
      <MemberSignature Language="C#" Value="public Urho.Intersection IsInside (Urho.BoundingBox box);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Urho.Intersection IsInside(valuetype Urho.BoundingBox box) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Intersection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="box" Type="Urho.BoundingBox" />
      </Parameters>
      <Docs>
        <param name="box">The box to test if it is inside this instance’s box.</param>
        <summary>
          <para>Test if another bounding box is inside, outside or intersects.</para>
        </summary>
        <returns>
          <para>
            <see cref="E:Urho.Intersection.Outside" /> if the specified <paramref name="box" /> is outside the current bounding box, or <see cref="E:Urho.Intersection.Inside" /> if the <paramref name="box" /> is fully contained within this bounding box, or <see cref="E:Urho.Intersection.Intersects" /> if the specified <paramref name="box" /> intersects this bounding box.</para>
          <para>
          </para>
        </returns>
        <remarks>If you are only interested on the Inside/Outside values and do not care about intersect, you can use the <see cref="M:Urho.BoundingBox.IsInsideFast" /> method which performs fewer tests.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInside">
      <MemberSignature Language="C#" Value="public Urho.Intersection IsInside (Urho.Vector3 point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Urho.Intersection IsInside(valuetype Urho.Vector3 point) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Intersection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="Urho.Vector3" />
      </Parameters>
      <Docs>
        <param name="point">The point to test.</param>
        <summary>Test if a point is  inside, outside or intersects the bounding box.</summary>
        <returns>
          <see cref="E:Urho.Intersection.Outside" /> if the specified <paramref name="point" /> is outside the current bounding box or <see cref="E:Urho.Intersection.Inside" /> if the specified <paramref name="point" /> is inside this bounding box. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInsideFast">
      <MemberSignature Language="C#" Value="public Urho.Intersection IsInsideFast (Urho.BoundingBox box);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Urho.Intersection IsInsideFast(valuetype Urho.BoundingBox box) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Intersection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="box" Type="Urho.BoundingBox" />
      </Parameters>
      <Docs>
        <param name="box">The box to test if it is inside this instance’s box.</param>
        <summary>Test if another bounding box is inside or outside/intersects.</summary>
        <returns>
          <see cref="E:Urho.Intersection.Outside" /> if the specified <paramref name="box" /> is outside the current bounding box or <see cref="E:Urho.Intersection.Inside" /> if the specified <paramref name="box" /> intersects or is completelly inside this bounding box.   If you want more precise information use the <see cref="M:Urho.BoundingBox.IsInside(Urho.BoundingBox)" /> method which can distinguish between <see cref="E:Urho.Intersection.Inside" /> and <see cref="E:Urho.Intersection.Intersects" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public Urho.Vector3 Max;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype Urho.Vector3 Max" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Vector3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Maximum vector</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (Urho.BoundingBox box);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(valuetype Urho.BoundingBox box) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="box" Type="Urho.BoundingBox" />
      </Parameters>
      <Docs>
        <param name="box">The other bounding box to merge with this one.</param>
        <summary>Merge another bounding box with this one.</summary>
        <remarks>The result of merging two bounding boxes is a bounding box that bounds both boxes.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (Urho.Frustum frustum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class Urho.Frustum frustum) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frustum" Type="Urho.Frustum" />
      </Parameters>
      <Docs>
        <param name="frustum">The frustum containing the vertices.</param>
        <summary>Merge the vertices of the provided frustum with the bounding box.</summary>
        <remarks>
          <para>Merges the frustum vertices with the bounding box, extending the bounding box if needed.</para>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (Urho.Vector3 point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(valuetype Urho.Vector3 point) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="Urho.Vector3" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <summary>Merges the point with the bounding box, extending the bounding box if needed.</summary>
        <remarks>The result of merging two bounding boxes is a bounding box that bounds both boxes.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (Urho.Vector3[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(valuetype Urho.Vector3[] points) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="Urho.Vector3[]" />
      </Parameters>
      <Docs>
        <param name="points">Array of vectors.</param>
        <summary>Merge the vertices  with the bounding box.</summary>
        <remarks>Merges the vector point with the bounding box, extending the bounding box if needed.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public Urho.Vector3 Min;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype Urho.Vector3 Min" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Vector3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Minimum vector.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public Urho.Vector3 Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Urho.Vector3 Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Urho.Vector3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The size of the bounding box, the Max minus the Min.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
